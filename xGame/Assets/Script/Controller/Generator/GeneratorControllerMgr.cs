// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using com.CommonUtility.Common;
using com.CommonUtility.CommonData;
using Common.Model.Item;

namespace Controller.Generator
{
	public class GeneratorControllerMgr : TSingleton<GeneratorControllerMgr>, IDisposable
	{
		#region IDisposable implementation

		public void Dispose ()
		{
			foreach (var item in m_dicControllers) 
			{
				for(int iIndex = 0; iIndex < item.Value.Count; iIndex++)
				{
					item.Value[iIndex].Dispose();
				}

				item.Value.Clear();
			}

			m_dicControllers.Clear ();
		}

		#endregion

		public GeneratorControllerMgr ()
		{
		}

		public void AddController(int ID)
		{
			GeneratorItem genItem = ItemDataManager.Instance.GetGeneratorItem (ID);
			if (null != genItem) 
			{
				List<GeneratorController> find = _FindControllerList(ID);
				GeneratorController newController = new GeneratorController();
				newController.Context = genItem;
				find.Add(newController);
			}
		}

		public void Generate()
		{
			foreach (var item in m_dicControllers) 
			{
				for(int iIndex = 0; iIndex < item.Value.Count;iIndex++)
				{
					item.Value[iIndex].Generate();
				}
			}
		}

		#region Private Functions

		private List<GeneratorController> _FindControllerList(int controllerID)
		{
			List<GeneratorController> find = null;

			if(!m_dicControllers.TryGetValue (controllerID, out find))
			{
				find = new List<GeneratorController>();
				m_dicControllers.Add(controllerID, find);
			}

			return find;
		}

		#endregion 


		#region Member

		private Dictionary<int, List<GeneratorController>> m_dicControllers = new Dictionary<int, List<GeneratorController>>();
		#endregion
	}
}

